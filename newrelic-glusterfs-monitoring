#!/usr/bin/python

import httplib, urllib, csv, urllib2, socket, os, time, json, datetime, requests, ConfigParser, sys, traceback, subprocess

def	my_int(sth):
	if (sth == None or sth.isdigit() == False):
		return 0
	return int(sth)

class LogsType:
	ERROR = "ERR"
	WARNING = "WRG"

def singleton(cls):
	instance=cls()
	cls.__new__ = cls.__call__= lambda cls: instance
	cls.__init__ = lambda self: None
	return instance

@singleton
class Config():
	def get(self, section, item):
		return self.cp.get(section, item)

	def getInt(self, section, item):
		return self.cp.getint(section, item)

	def getBoolean(self, section, item):
		return self.cp.getboolean(section, item)

	def __init__(self):
		self.cp = ConfigParser.RawConfigParser()
		self.cp.read('/etc/newrelic/newrelic-agent.cfg')

class Agent:
	def update_postdata(self):
		self.post_data['components'] = []
		for component in self.components:
			self.post_data['components'].append(self.components[component])

	def log(self, errtype, message):
		self.logs_file.write("[" + errtype + "]" + ' ' + str(datetime.datetime.now()) + ' : ' + message +'\n')

	def populateMetrics(self, metrics, value_type, scale, value):
		label = "Component/" + value_type + "[" + scale + "]"
		if (value == 'Y'):
			value = 1
		if (value == None or value == ''):
			value = 0
		if label in metrics:
			yet = metrics[label]
			if type(yet) is dict:
				yet['min'] = (yet['min'] < value and yet['min'] or value)
				yet['max'] = (yet['max'] > value and yet['max'] or value)
				yet['total'] += value
				yet['count'] += 1
				yet['sum_of_squares'] += (value * value)
				metrics[label] = yet
			else:
				metrics[label] = {}
				metrics[label]['min'] = (yet < value and yet or value)
				metrics[label]['max'] = (yet > value and yet or value)
				metrics[label]['total'] = yet + value
				metrics[label]['count'] = 2
				metrics[label]['sum_of_squares'] = (yet * yet + value * value)
		else:
			metrics[label] = value

	def populateDeltaMetrics(self, name, metrics, value_type, scale, value):
		label = "Component/" + value_type + "[" + scale + "]"
		if (name not in self.old):
			self.old[name] = {}
		if (value == None or value == ''):
			value = 0
		delta = 0
		if 'latency' in scale:
			delta = value
		else:
			if label in self.old[name] and value > self.old[name][label]:
				delta = value - self.old[name][label]
		self.old[name][label] = value
		self.populateMetrics(metrics, value_type, scale, delta)

	def get_nfsstat_data(self):
		volumes = subprocess.Popen(['gluster volume list'], stdout=subprocess.PIPE, shell=True)
		(volume_list,volerror) = volumes.communicate()
		self.complete_list = volume_list
		volumes.stdout.close()
		ret = {}
		for volume in volume_list.split('\n'):
			volume=str(volume)
			if volume is not '':
				proc = subprocess.Popen(['./get.sh', volume], stdout=subprocess.PIPE)
                		(out, err) = proc.communicate()
                		ret[volume] = {}
                		for line in out.split('\n'):
                        		content = line.split()
                        		if (len(content) == 9):
						ret[volume][content[8]] = {}
                                		ret[volume][content[8]]['op'] = my_int(content[7])
						ret[volume][content[8]]['per_let'] = float(content[0])
						ret[volume][content[8]]['avg_let'] = float(content[1])
						ret[volume][content[8]]['min_let'] = float(content[3])
						ret[volume][content[8]]['max_let'] = float(content[5])
                return ret

	def post_datas(self):
		post_json = json.dumps(self.post_data, sort_keys=True, indent=4)
		print post_json
		headers = {"Content-Type": "application/json",
					"Accept": "application/json","X-License-Key": self.newrelic_license}

		conn = httplib.HTTPSConnection(self.platform_api_ip, timeout=5)
		conn.request("POST", self.platform_api_url, post_json, headers)
		response = conn.getresponse()
		return (response.status)

	def get_component_from_csv(self, row):
		for volume in self.complete_list.split('\n'):
			volume = str(volume)
			if volume is not '':
				duration = int(time.time() - self.last_poll_time)
                		if (self.agent_host not in self.components):
                        		tmp_component = {}
                        		tmp_component['name'] = self.agent_host
                        		tmp_component['guid'] = self.guid
                        		tmp_component['duration'] = duration
                       		 	self.components[self.agent_host] = tmp_component
                       		 	metrics = {}
                		else:
                        		metrics = self.components[self.agent_host]['metrics']
                		self.components[self.agent_host]['duration'] = duration
				READS=0
				WRITES=0
				if 'CREATE' in row[volume]:
	                		self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/CREATE", "Operations", row[volume]['CREATE']['op'])
					self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/CREATE", "Percent-latency", row[volume]['CREATE']['per_let'])
					self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/CREATE", "Average-latency", row[volume]['CREATE']['avg_let'])
					self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/CREATE", "Minimum-latency", row[volume]['CREATE']['min_let'])
					self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/CREATE", "Maximum-latency", row[volume]['CREATE']['max_let'])
 		        		WRITES += row[volume]['CREATE']['op']
				if 'WRITE' in row[volume]:
                			self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/WRITE", "Operations", row[volume]['WRITE']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/WRITE", "Percent-latency", row[volume]['WRITE']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/WRITE", "Average-latency", row[volume]['WRITE']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/WRITE", "Minimum-latency", row[volume]['WRITE']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/WRITE", "Maximum-latency", row[volume]['WRITE']['max_let'])
                		        WRITES += row[volume]['WRITE']['op']
                		if 'READ' in row[volume]:
                			self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/READ", "Operations", row[volume]['READ']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/READ", "Percent-latency", row[volume]['READ']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/READ", "Average-latency", row[volume]['READ']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/READ", "Minimum-latency", row[volume]['READ']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/READ", "Maximum-latency", row[volume]['READ']['max_let'])
 					READS += row[volume]['READ']['op']
				if 'FSYNC' in row[volume]:
	        		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/FSYNC", "Operations", row[volume]['FSYNC']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/FSYNC", "Percent-latency", row[volume]['FSYNC']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/FSYNC", "Average-latency", row[volume]['FSYNC']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/FSYNC", "Minimum-latency", row[volume]['FSYNC']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/FSYNC", "Maximum-latency", row[volume]['FSYNC']['max_let'])
					WRITES += row[volume]['FSYNC']['op']
				if 'UNLINK' in row[volume]:
              				self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/UNLINK", "Operations", row[volume]['UNLINK']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/UNLINK", "Percent-latency", row[volume]['UNLINK']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/UNLINK", "Average-latency", row[volume]['UNLINK']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/UNLINK", "Minimum-latency", row[volume]['UNLINK']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Files/UNLINK", "Maximum-latency", row[volume]['UNLINK']['max_let'])
  					WRITES += row[volume]['UNLINK']['op']
				if 'READDIR' in row[volume]:
	        		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/READDIR", "Operations", row[volume]['READDIR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/READDIR", "Percent-latency", row[volume]['READDIR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/READDIR", "Average-latency", row[volume]['READDIR']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/READDIR", "Minimum-latency", row[volume]['READDIR']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/READDIR", "Maximum-latency", row[volume]['READDIR']['max_let'])
                		        READS += row[volume]['READDIR']['op']
                		if 'MKDIR' in row[volume]:
	        		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/MKDIR", "Operations", row[volume]['MKDIR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/MKDIR", "Percent-latency", row[volume]['MKDIR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/MKDIR", "Average-latency", row[volume]['MKDIR']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/MKDIR", "Minimum-latency", row[volume]['MKDIR']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/MKDIR", "Maximum-latency", row[volume]['MKDIR']['max_let'])
                		        WRITES += row[volume]['MKDIR']['op']
				if 'RMDIR' in row[volume]:
					self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/RMDIR", "Operations", row[volume]['RMDIR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/RMDIR", "Percent-latency", row[volume]['RMDIR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/RMDIR", "Average-latency", row[volume]['RMDIR']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/RMDIR", "Minimum-latency", row[volume]['RMDIR']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Directories/RMDIR", "Maximum-latency", row[volume]['RMDIR']['max_let'])
					WRITES += row[volume]['RMDIR']['op']
				if 'GETXATTR' in row[volume]:
	        		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETXATTR", "Operations", row[volume]['GETXATTR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETXATTR", "Percent-latency", row[volume]['GETXATTR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETXATTR", "Average-latency", row[volume]['GETXATTR']['avg_let'])
                		      	self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETXATTR", "Minimum-latency", row[volume]['GETXATTR']['min_let'])
        			        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETXATTR", "Maximum-latency", row[volume]['GETXATTR']['max_let'])
                		        READS += row[volume]['GETXATTR']['op']
				if 'SETXATTR' in row[volume]:
                			self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETXATTR", "Operations", row[volume]['SETXATTR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETXATTR", "Percent-latency", row[volume]['SETXATTR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETXATTR", "Average-latency", row[volume]['SETXATTR']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETXATTR", "Minimum-latency", row[volume]['SETXATTR']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETXATTR", "Maximum-latency", row[volume]['SETXATTR']['max_let'])
					WRITES += row[volume]['SETXATTR']['op']
                		if 'GETATTR' in row[volume]:
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETATTR", "Operations", row[volume]['GETATTR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETATTR", "Percent-latency", row[volume]['GETATTR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETATTR", "Average-latency", row[volume]['GETATTR']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETATTR", "Minimum-latency", row[volume]['GETATTR']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/GETATTR", "Maximum-latency", row[volume]['GETATTR']['max_let'])
                		        READS += row[volume]['GETATTR']['op']
                		if 'SETATTR' in row[volume]:
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETATTR", "Operations", row[volume]['SETATTR']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETATTR", "Percent-latency", row[volume]['SETATTR']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETATTR", "Average-latency", row[volume]['SETATTR']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETATTR", "Minimum-latency", row[volume]['SETATTR']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/SETATTR", "Maximum-latency", row[volume]['SETATTR']['max_let'])
                		        WRITES += row[volume]['SETATTR']['op']
				if 'LOOKUP' in row[volume]:
	        		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/lookup", "Operations", row[volume]['LOOKUP']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/LOOKUP", "Percent-latency", row[volume]['LOOKUP']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/LOOKUP", "Average-latency", row[volume]['LOOKUP']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/LOOKUP", "Minimum-latency", row[volume]['LOOKUP']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/LOOKUP", "Maximum-latency", row[volume]['LOOKUP']['max_let'])
					READS += row[volume]['LOOKUP']['op']
				if 'OPEN' in row[volume]:
	        		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/OPEN", "Operations", row[volume]['OPEN']['op'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/OPEN", "Percent-latency", row[volume]['OPEN']['per_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/OPEN", "Average-latency", row[volume]['OPEN']['avg_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/OPEN", "Minimum-latency", row[volume]['OPEN']['min_let'])
                		        self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "FilesInformations/OPEN", "Maximum-latency", row[volume]['OPEN']['max_let'])
					READS += row[volume]['OPEN']['op']

				self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Main/Total", "Operations", READS + WRITES)
        			self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Main/Read", "Operations", READS)
                		self.populateDeltaMetrics(self.agent_host, metrics, volume + "/" + "Main/Write", "Operations", WRITES)


                		self.components[self.agent_host]['metrics'] = metrics

	def run(self):
		run = True
		code = 200
		while (run):
			try:
				data = self.get_nfsstat_data()
				self.get_component_from_csv(data)
				self.update_postdata()
				code = self.post_datas()
				if (code == 200):
					# Clearing component cash
					self.components = {}
					self.last_poll_time = time.time()
				elif (code == 400):
					self.log(LogsType.ERROR, " 400 error encontered, request uncorrect")
					run = False
				elif (code == 403):
					self.log(LogsType.ERROR, " 403 acces forbidden, checkout your license key")
					run = False
				elif (code == 404):
					self.log(LogsType.ERROR, " 404 bad URL - checkout with developper of this application")
					run = False
				elif (code == 415):
					self.log(LogsType.ERROR, " 415 request incorrect")
					run = False
			except Exception as e:
				traceback.print_exc(file=sys.stdout)
				self.log(LogsType.ERROR, str(e))
				code = "THROWN"
			if (run):
				time.sleep( int(self.poll_cycle))

	def __init__(self):
		# Init NewRelic Variables
		self.platform_api_uri = Config().get('NewRelicAPI', 'uri')
		self.platform_api_url = Config().get('NewRelicAPI', 'url')
		self.platform_api_ip = Config().get('NewRelicAPI', 'ip')
		self.newrelic_license = Config().get('NewRelicAPI', 'license_key')
		self.poll_cycle = Config().getInt('NewRelicAPI', 'poll_cycle')

		# Init of agent informations
		self.guid = Config().get('Agent', 'gluster_guid')
		self.agent_host = socket.gethostname()
		self.agent_pid = os.getpid()
		self.version = Config().get('Agent', 'version')
		self.agent_hash = {'host' : self.agent_host, 'pid' : self.agent_pid, 'version' : str(self.version)}

		# Init old dict for delta computing values
		self.old = {}

		# Init time of program start
		self.last_poll_time = time.time() - float(self.poll_cycle)

		# Init of component
		self.components = {}

		# Init post_datas
		self.post_data = {'agent': self.agent_hash, 'components':[]}

		# Init Logs
		self.logs_enabled = Config().getBoolean('Logs', 'enable')
		if (self.logs_enabled):
			self.logs_file = open(Config().get('Logs', 'file'), 'a')
			if (self.logs_file == None):
				sys.stderr.write('Impossible to open log_file, no logs saved')
				self.logs_enabled  = False

if __name__ == '__main__':
	euid = os.geteuid()
	if euid != 0:
		print ('This agent needs to be run as sudoers or root')
	else:
		p = Agent()
		p.run()

